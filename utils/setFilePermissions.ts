import { drive_v3 } from 'googleapis';

const defaultDescription = 'Uploaded by ðŸš€ Google Drive UploaderÂ²';
const defaultThumbnailBase64 =
	''; // Your full base64 encoded image string here

export const setFilePermissions = async ({
	drive,
	fileId,
	description = defaultDescription,
	thumbnailBase64 = defaultThumbnailBase64,
	setPublic = true,
	shareEmails = [],
}: {
	drive: drive_v3.Drive;
	fileId: string;
	description?: string;
	thumbnailBase64?: string;
	setPublic?: boolean;
	shareEmails?: string[];
}): Promise<{ status: boolean; message: string }> => {
	let status = false;
	let message = '';

	try {
		// Set file description and thumbnail
		const updateMetadata: drive_v3.Schema$File = {
			description,
			contentHints: {
				thumbnail: {
					image: thumbnailBase64, // Directly use the base64 string
					mimeType: 'image/jpeg', // Change the mime type based on your thumbnail type
				},
			},
		};

		await drive.files.update({
			fileId,
			requestBody: updateMetadata,
		});
		message = 'File metadata updated. ';

		// Set file to public if setPublic is true
		if (setPublic) {
			await drive.permissions.create({
				fileId,
				requestBody: { type: 'anyone', role: 'reader' },
			});
			message += 'File set to public. ';
		}

		// Share with specific emails if provided and not empty
		const validEmails = shareEmails.filter(email => email.trim() !== '');

		if (validEmails.length > 0) {
			for (const email of validEmails) {
				await drive.permissions.create({
					fileId,
					requestBody: { type: 'user', role: 'writer', emailAddress: email },
				});
			}
			message += `File shared with emails: ${validEmails.join(', ')}.`;
		} else if (!setPublic) {
			message += 'No valid emails provided to share the file with.';
		}

		status = true;
	} catch (error: any) {
		message = `Error: ${error.message}`;
	}

	return { status, message };
};
